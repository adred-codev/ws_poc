version: '3'

includes:
  nats: ./tasks/nats.yml
  node: ./tasks/nodejs.yml
  go: ./tasks/go.yml
  test: ./tasks/test.yml
  dev: ./tasks/dev.yml
  docker: ./tasks/docker.yml

vars:
  NODE_SERVER_PORT: "3001"
  GO_SERVER_PORT: "3002"
  NATS_PORT: "4222"
  NATS_MONITOR_PORT: "8222"

tasks:
  # Quick start commands - the main entry points
  start:
    desc: "🚀 Start complete Node.js stack (NATS + Server + Publisher)"
    deps: [nats:start]
    cmds:
      - task: node:server
      - sleep 2
      - task: node:publisher
      - echo "✅ Node.js stack ready!"
      - echo "🔌 WebSocket at ws://localhost:{{.NODE_SERVER_PORT}}/ws"
      - echo "📊 Dashboard at http://localhost:{{.NODE_SERVER_PORT}}/dashboard"

  start:go:
    desc: "⚡ Start complete Go stack (NATS + Go Server + Publisher)"
    deps: [nats:start, go:build]
    cmds:
      - task: go:server
      - sleep 2
      - task: node:publisher  # Still use Node.js publisher for data generation
      - echo "✅ Go stack ready!"
      - echo "📈 Stats API at http://localhost:{{.GO_SERVER_PORT}}/stats"
      - echo "🔌 WebSocket at ws://localhost:{{.GO_SERVER_PORT}}/ws"

  start:both:
    desc: "🔄 Start both servers for performance comparison"
    deps: [nats:start, go:build]
    cmds:
      - task: node:server    # Port 3001
      - task: go:server      # Port 3002
      - sleep 2
      - task: node:publisher
      - echo "✅ Both servers running!"
      - echo "🟢 Node.js WS at ws://localhost:{{.NODE_SERVER_PORT}}/ws"
      - echo "⚡ Go WS at ws://localhost:{{.GO_SERVER_PORT}}/ws"

  start:docker:
    desc: "🐳 Start complete stack using Docker Compose"
    cmds:
      - task: docker:up
      - echo "✅ Docker stack ready!"
      - echo "🟢 Node.js (containerized) at ws://localhost:3001/ws"
      - echo "⚡ Go (containerized) at ws://localhost:3002/ws"
      - echo "📈 NATS Monitor at http://localhost:8222"

  # Development workflows
  dev:
    desc: "🛠️  Development mode with Node.js (auto-restart)"
    cmds:
      - task: start

  dev:go:
    desc: "🛠️  Development mode with Go"
    cmds:
      - task: start:go

  dev:compare:
    desc: "🆚 Development mode with both servers for comparison"
    cmds:
      - task: start:both

  # Testing workflows
  test:
    desc: "🧪 Run quick load test on active server"
    cmds:
      - task: test:quick

  test:all:
    desc: "🧪 Run comprehensive performance comparison"
    cmds:
      - task: test:compare:performance

  # Utility commands
  stop:
    desc: "🛑 Stop all running services"
    cmds:
      - task: nats:stop
      - pkill -f "tsx src" || true
      - pkill -f "odin-ws-server" || true
      - pkill -f "python3 -m http.server" || true
      - echo "✅ All services stopped"

  clean:
    desc: "🧹 Clean up build artifacts and stop services"
    cmds:
      - task: stop
      - task: go:clean
      - echo "✅ Cleanup complete"

  status:
    desc: "📋 Check status of all services"
    cmds:
      - echo "🔍 Checking service status..."
      - echo "NATS Server:" && (curl -s http://localhost:{{.NATS_MONITOR_PORT}}/varz | jq -r '.server_name // "Not running"')
      - echo "Node.js Server:" && (curl -s http://localhost:{{.NODE_SERVER_PORT}}/health | jq -r '.status // "Not running"')
      - echo "Go Server:" && (curl -s http://localhost:{{.GO_SERVER_PORT}}/health | jq -r '.status // "Not running"')

  # Setup and installation
  setup:
    desc: "⚙️  Initial setup - install dependencies and build"
    cmds:
      - task: dev:setup

  help:
    desc: "❓ Show available commands"
    cmds:
      - echo "🚀 Odin WebSocket Server - Task Commands"
      - echo ""
      - echo "Quick Start:"
      - echo "  task start         - Start Node.js stack"
      - echo "  task start:go      - Start Go stack"
      - echo "  task start:both    - Start both servers for comparison"
      - echo "  task start:docker  - Start everything in Docker containers"
      - echo ""
      - echo "Development:"
      - echo "  task dev           - Development mode (Node.js)"
      - echo "  task dev:go        - Development mode (Go)"
      - echo "  task dev:compare   - Both servers for comparison"
      - echo ""
      - echo "Docker:"
      - echo "  task docker:up     - Start all containers"
      - echo "  task docker:status - Show container status"
      - echo "  task docker:logs   - View container logs"
      - echo "  task docker:down   - Stop all containers"
      - echo ""
      - echo "Testing:"
      - echo "  task test          - Quick load test"
      - echo "  task test:all      - Comprehensive testing"
      - echo "  task docker:test:compare - Compare containerized servers"
      - echo ""
      - echo "Management:"
      - echo "  task status        - Check service status"
      - echo "  task stop          - Stop all services"
      - echo "  task clean         - Clean up and stop"
      - echo "  task setup         - Initial setup"
      - echo ""
      - echo "For more commands run task --list"

  default:
    desc: "🏠 Default task - show help"
    cmds:
      - task: help