version: '3'

# Testing and stress testing tasks

vars:
  SCRIPTS_DIR: ./scripts

tasks:
  light:
    desc: Run light stress test (100 connections, 30s, override with CONNECTIONS/DURATION/SERVER)
    vars:
      CONNECTIONS: '{{.CONNECTIONS | default "100"}}'
      DURATION: '{{.DURATION | default "30"}}'
      SERVER: '{{.SERVER | default "go2"}}'
    cmds:
      - node {{.SCRIPTS_DIR}}/stress-test-high-load.cjs {{.CONNECTIONS}} {{.DURATION}} {{.SERVER}}

  medium:
    desc: Run medium stress test (500 connections, 60s, override with CONNECTIONS/DURATION/SERVER)
    vars:
      CONNECTIONS: '{{.CONNECTIONS | default "500"}}'
      DURATION: '{{.DURATION | default "60"}}'
      SERVER: '{{.SERVER | default "go2"}}'
    cmds:
      - node {{.SCRIPTS_DIR}}/stress-test-high-load.cjs {{.CONNECTIONS}} {{.DURATION}} {{.SERVER}}

  heavy:
    desc: Run heavy stress test (2000 connections, 120s, override with CONNECTIONS/DURATION/SERVER)
    vars:
      CONNECTIONS: '{{.CONNECTIONS | default "2000"}}'
      DURATION: '{{.DURATION | default "120"}}'
      SERVER: '{{.SERVER | default "go2"}}'
    cmds:
      - node {{.SCRIPTS_DIR}}/stress-test-high-load.cjs {{.CONNECTIONS}} {{.DURATION}} {{.SERVER}}

  custom:
    desc: Run custom stress test (use CONNECTIONS/DURATION/SERVER vars)
    vars:
      CONNECTIONS: '{{.CONNECTIONS | default "100"}}'
      DURATION: '{{.DURATION | default "30"}}'
      SERVER: '{{.SERVER | default "go2"}}'
    cmds:
      - node {{.SCRIPTS_DIR}}/stress-test-high-load.cjs {{.CONNECTIONS}} {{.DURATION}} {{.SERVER}}

  realistic:
    desc: Run realistic trading traffic simulation (auto-balances, override with TARGET_CONNECTIONS/DURATION)
    vars:
      TARGET_CONNECTIONS: '{{.TARGET_CONNECTIONS | default "1000"}}'
      DURATION: '{{.DURATION | default "3600"}}'
      WS_URL: '{{.WS_URL | default "ws://localhost:3004/ws"}}'
      HEALTH_URL: '{{.HEALTH_URL | default "http://localhost:3004/health"}}'
    cmds:
      - node {{.SCRIPTS_DIR}}/realistic-trading-simulator.cjs
    env:
      TARGET_CONNECTIONS: '{{.TARGET_CONNECTIONS}}'
      DURATION: '{{.DURATION}}'
      WS_URL: '{{.WS_URL}}'
      HEALTH_URL: '{{.HEALTH_URL}}'

  realistic:short:
    desc: Run realistic simulation for 5 minutes (300 connections)
    cmds:
      - task: realistic
        vars:
          TARGET_CONNECTIONS: "300"
          DURATION: "300"

  realistic:medium:
    desc: Run realistic simulation for 30 minutes (1000 connections)
    cmds:
      - task: realistic
        vars:
          TARGET_CONNECTIONS: "1000"
          DURATION: "1800"

  realistic:long:
    desc: Run realistic simulation for 2 hours (2000 connections)
    cmds:
      - task: realistic
        vars:
          TARGET_CONNECTIONS: "2000"
          DURATION: "7200"

  sustained:
    desc: Run sustained load test (gradual ramp + hold, override with TARGET_CONNECTIONS/RAMP_RATE/DURATION)
    vars:
      TARGET_CONNECTIONS: '{{.TARGET_CONNECTIONS | default "2000"}}'
      RAMP_RATE: '{{.RAMP_RATE | default "100"}}'
      DURATION: '{{.DURATION | default "1800"}}'
      WS_URL: '{{.WS_URL | default "ws://localhost:3004/ws"}}'
      HEALTH_URL: '{{.HEALTH_URL | default "http://localhost:3004/health"}}'
    cmds:
      - node {{.SCRIPTS_DIR}}/sustained-load-test.cjs
    env:
      TARGET_CONNECTIONS: '{{.TARGET_CONNECTIONS}}'
      RAMP_RATE: '{{.RAMP_RATE}}'
      DURATION: '{{.DURATION}}'
      WS_URL: '{{.WS_URL}}'
      HEALTH_URL: '{{.HEALTH_URL}}'

  # ============================================================================
  # CAPACITY TESTS - Match server's WS_MAX_CONNECTIONS (2000)
  # Expected: All connections succeed, server stable, no rejections
  # ============================================================================

  sustained:capacity:
    desc: "CAPACITY TEST - Match server limit (2000 connections, 100/sec ramp, 30 min)"
    cmds:
      - task: sustained
        vars:
          TARGET_CONNECTIONS: "2000"
          RAMP_RATE: "100"
          DURATION: "1800"

  sustained:capacity:short:
    desc: "CAPACITY TEST - Short (2000 connections, 100/sec ramp, 5 min)"
    cmds:
      - task: sustained
        vars:
          TARGET_CONNECTIONS: "2000"
          RAMP_RATE: "100"
          DURATION: "300"

  sustained:capacity:burst:
    desc: "BURST TEST - Rapid ramp to capacity (2000 connections, 1000/sec ramp, 10 min)"
    cmds:
      - task: sustained
        vars:
          TARGET_CONNECTIONS: "2000"
          RAMP_RATE: "1000"
          DURATION: "600"

  # ============================================================================
  # STRESS/OVERLOAD TESTS - Exceed server's WS_MAX_CONNECTIONS (2000)
  # Expected: Rejections after limit, server stays stable, no crash
  # ============================================================================

  sustained:stress:
    desc: "STRESS TEST - 1.5x overload (3000 connections, 200/sec ramp, 30 min)"
    cmds:
      - task: sustained
        vars:
          TARGET_CONNECTIONS: "3000"
          RAMP_RATE: "200"
          DURATION: "1800"

  sustained:stress:heavy:
    desc: "STRESS TEST - 2x overload (4000 connections, 200/sec ramp, 30 min)"
    cmds:
      - task: sustained
        vars:
          TARGET_CONNECTIONS: "4000"
          RAMP_RATE: "200"
          DURATION: "1800"

  sustained:stress:extreme:
    desc: "STRESS TEST - 2.5x overload (5000 connections, 300/sec ramp, 60 min)"
    cmds:
      - task: sustained
        vars:
          TARGET_CONNECTIONS: "5000"
          RAMP_RATE: "300"
          DURATION: "3600"

  # ============================================================================
  # MESSAGE THROUGHPUT TESTS - Test message processing WITHOUT connection scaling
  # Purpose: Isolate message throughput from connection capacity testing
  # Expected: High message rate, zero slow client disconnects, low latency
  # ============================================================================

  throughput:
    desc: Run message throughput test (fixed connections, override with TARGET_CONNECTIONS/DURATION)
    vars:
      TARGET_CONNECTIONS: '{{.TARGET_CONNECTIONS | default "500"}}'
      DURATION: '{{.DURATION | default "300"}}'
      WS_URL: '{{.WS_URL | default "ws://localhost:3004/ws"}}'
    cmds:
      - node {{.SCRIPTS_DIR}}/test-message-throughput.cjs {{.WS_URL}} {{.TARGET_CONNECTIONS}} {{.DURATION}}
    env:
      TARGET_CONNECTIONS: '{{.TARGET_CONNECTIONS}}'
      DURATION: '{{.DURATION}}'
      WS_URL: '{{.WS_URL}}'

  throughput:500:
    desc: "MESSAGE THROUGHPUT - 500 connections, full message load (5 min)"
    cmds:
      - task: throughput
        vars:
          TARGET_CONNECTIONS: "500"
          DURATION: "300"

  throughput:1000:
    desc: "MESSAGE THROUGHPUT - 1000 connections, full message load (5 min)"
    cmds:
      - task: throughput
        vars:
          TARGET_CONNECTIONS: "1000"
          DURATION: "300"

  # ============================================================================
  # CONNECTION CAPACITY TESTS - Test max connections WITHOUT message load
  # Purpose: Isolate connection handling from message throughput testing
  # Expected: Connections established and stable, minimal CPU/memory per connection
  # ============================================================================

  capacity:
    desc: Run connection capacity test (no messages, override with TARGET_CONNECTIONS/DURATION)
    vars:
      TARGET_CONNECTIONS: '{{.TARGET_CONNECTIONS | default "5000"}}'
      DURATION: '{{.DURATION | default "300"}}'
      WS_URL: '{{.WS_URL | default "ws://localhost:3004/ws"}}'
    cmds:
      - node {{.SCRIPTS_DIR}}/test-connection-rate.cjs {{.WS_URL}} {{.TARGET_CONNECTIONS}} {{.DURATION}}
    env:
      TARGET_CONNECTIONS: '{{.TARGET_CONNECTIONS}}'
      DURATION: '{{.DURATION}}'
      WS_URL: '{{.WS_URL}}'

  capacity:5k:
    desc: "CONNECTION CAPACITY - 5000 connections, no messages (5 min)"
    cmds:
      - task: capacity
        vars:
          TARGET_CONNECTIONS: "5000"
          DURATION: "300"

  capacity:10k:
    desc: "CONNECTION CAPACITY - 10000 connections, no messages (5 min)"
    cmds:
      - task: capacity
        vars:
          TARGET_CONNECTIONS: "10000"
          DURATION: "300"

  capacity:max:
    desc: "CONNECTION CAPACITY - Test server max (18000 connections, no messages, 10 min)"
    cmds:
      - task: capacity
        vars:
          TARGET_CONNECTIONS: "18000"
          DURATION: "600"

  # ============================================================================
  # LEGACY TASKS (kept for backwards compatibility, redirect to new variants)
  # ============================================================================

  sustained:short:
    desc: "[LEGACY] Use sustained:capacity:short instead - 5 min (2000 connections)"
    cmds:
      - task: sustained:capacity:short

  sustained:medium:
    desc: "[LEGACY] Use sustained:capacity instead - 30 min (2000 connections)"
    cmds:
      - task: sustained:capacity

  sustained:long:
    desc: "[LEGACY] Use sustained:stress instead - 30 min (3000 connections overload)"
    cmds:
      - task: sustained:stress
