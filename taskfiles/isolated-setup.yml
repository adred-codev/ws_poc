version: '3'

# Isolated Two-Instance Setup
# Based on docs/INSTANCE_ISOLATION_PLAN.md
#
# Docker Compose manifests located in:
#   - isolated/ws-go/docker-compose.yml
#   - isolated/backend/docker-compose.yml
#   - isolated/backend/prometheus.yml
#
# Architecture:
#   - odin-ws-go (e2-small): WebSocket server only
#   - odin-backend (e2-small): NATS, Prometheus, Grafana, Loki, Promtail, Publisher

vars:
  GCP_PROJECT_ID:
    sh: echo "${GCP_PROJECT_ID:-odin-ws-server}"
  GCP_ZONE:
    sh: echo "${GCP_ZONE:-us-central1-a}"

  # Instance names
  WS_GO_INSTANCE: odin-ws-go
  BACKEND_INSTANCE: odin-backend

  # Machine types
  WS_GO_MACHINE_TYPE: e2-small
  BACKEND_MACHINE_TYPE: e2-small

  # Get instance IPs dynamically
  WS_GO_EXTERNAL_IP:
    sh: gcloud compute instances describe {{.WS_GO_INSTANCE}} --zone={{.GCP_ZONE}} --format='get(networkInterfaces[0].accessConfigs[0].natIP)' 2>/dev/null || echo "not-found"
  WS_GO_INTERNAL_IP:
    sh: gcloud compute instances describe {{.WS_GO_INSTANCE}} --zone={{.GCP_ZONE}} --format='get(networkInterfaces[0].networkIP)' 2>/dev/null || echo "not-found"
  BACKEND_EXTERNAL_IP:
    sh: gcloud compute instances describe {{.BACKEND_INSTANCE}} --zone={{.GCP_ZONE}} --format='get(networkInterfaces[0].accessConfigs[0].natIP)' 2>/dev/null || echo "not-found"
  BACKEND_INTERNAL_IP:
    sh: gcloud compute instances describe {{.BACKEND_INSTANCE}} --zone={{.GCP_ZONE}} --format='get(networkInterfaces[0].networkIP)' 2>/dev/null || echo "not-found"

# ============================================================================
# SETUP & PREREQUISITES
# ============================================================================

tasks:
  setup:
    desc: Configure gcloud CLI and authenticate
    cmds:
      - echo "üîß Setting up GCP environment..."
      - gcloud --version
      - gcloud auth login
      - gcloud config set project {{.GCP_PROJECT_ID}}
      - gcloud config set compute/zone {{.GCP_ZONE}}
      - echo "‚úÖ GCP configuration complete"
      - echo "   Project ‚Üí {{.GCP_PROJECT_ID}}"
      - echo "   Zone ‚Üí {{.GCP_ZONE}}"

  firewall:
    desc: Create firewall rules for isolated setup
    cmds:
      - echo "üî• Creating firewall rules..."

      # WebSocket (ws-go external access)
      - |
        gcloud compute firewall-rules create allow-websocket-isolated \
          --network=default \
          --allow=tcp:3004 \
          --source-ranges=0.0.0.0/0 \
          --target-tags=ws-server \
          --description="Allow WebSocket connections to ws-go" \
          2>/dev/null || echo "‚ö†Ô∏è  Rule 'allow-websocket-isolated' exists"

      # Prometheus scraping (backend ‚Üí ws-go metrics)
      - |
        gcloud compute firewall-rules create allow-prometheus-scrape-isolated \
          --network=default \
          --allow=tcp:3002 \
          --source-tags=backend \
          --target-tags=ws-server \
          --description="Allow Prometheus to scrape ws-go metrics" \
          2>/dev/null || echo "‚ö†Ô∏è  Rule 'allow-prometheus-scrape-isolated' exists"

      # NATS client (ws-go ‚Üí backend NATS)
      - |
        gcloud compute firewall-rules create allow-nats-internal \
          --network=default \
          --allow=tcp:4222 \
          --source-tags=ws-server \
          --target-tags=backend \
          --description="Allow ws-go to connect to NATS" \
          2>/dev/null || echo "‚ö†Ô∏è  Rule 'allow-nats-internal' exists"

      # Grafana UI (external access)
      - |
        gcloud compute firewall-rules create allow-grafana-isolated \
          --network=default \
          --allow=tcp:3010 \
          --source-ranges=0.0.0.0/0 \
          --target-tags=backend \
          --description="Allow Grafana UI access" \
          2>/dev/null || echo "‚ö†Ô∏è  Rule 'allow-grafana-isolated' exists"

      # Publisher API (testing)
      - |
        gcloud compute firewall-rules create allow-publisher-isolated \
          --network=default \
          --allow=tcp:3003 \
          --source-ranges=0.0.0.0/0 \
          --target-tags=backend \
          --description="Allow Publisher API access" \
          2>/dev/null || echo "‚ö†Ô∏è  Rule 'allow-publisher-isolated' exists"

      - gcloud compute firewall-rules list --filter="name~'isolated'"
      - echo "‚úÖ Firewall rules configured"

# ============================================================================
# INFRASTRUCTURE - CREATE INSTANCES
# ============================================================================

  create:ws-go:
    desc: Create dedicated ws-go instance (e2-small)
    cmds:
      - echo "üñ•Ô∏è  Creating ws-go instance..."
      - |
        gcloud compute instances create {{.WS_GO_INSTANCE}} \
          --zone={{.GCP_ZONE}} \
          --machine-type={{.WS_GO_MACHINE_TYPE}} \
          --network=default \
          --subnet=default \
          --tags=ws-server \
          --boot-disk-size=10GB \
          --boot-disk-type=pd-standard \
          --image-family=ubuntu-2404-lts-amd64 \
          --image-project=ubuntu-os-cloud \
          --metadata=startup-script='#!/bin/bash
            set -e
            apt-get update
            apt-get install -y curl git

            # Install Docker
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh

            # Install Docker Compose
            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose

            # Create deploy user
            useradd -m -s /bin/bash -G docker deploy

            echo "‚úÖ ws-go instance ready"
          '
      - echo "‚è≥ Waiting for instance to be ready..."
      - sleep 30
      - task: info:ws-go
      - echo "‚úÖ ws-go instance created"

  create:backend:
    desc: Create backend instance (e2-small) for NATS, monitoring, etc.
    cmds:
      - echo "üñ•Ô∏è  Creating backend instance..."
      - |
        gcloud compute instances create {{.BACKEND_INSTANCE}} \
          --zone={{.GCP_ZONE}} \
          --machine-type={{.BACKEND_MACHINE_TYPE}} \
          --network=default \
          --subnet=default \
          --tags=backend \
          --boot-disk-size=20GB \
          --boot-disk-type=pd-standard \
          --image-family=ubuntu-2404-lts-amd64 \
          --image-project=ubuntu-os-cloud \
          --metadata=startup-script='#!/bin/bash
            set -e
            apt-get update
            apt-get install -y curl git

            # Install Docker
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh

            # Install Docker Compose
            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose

            # Create deploy user
            useradd -m -s /bin/bash -G docker deploy

            echo "‚úÖ backend instance ready"
          '
      - echo "‚è≥ Waiting for instance to be ready..."
      - sleep 30
      - task: info:backend
      - echo "‚úÖ backend instance created"

  create:all:
    desc: Create both instances (ws-go + backend)
    cmds:
      - task: create:backend
      - task: create:ws-go
      - echo ""
      - echo "üéâ Both instances created!"
      - task: info:all

# ============================================================================
# DEPLOYMENT - COPY FILES & START SERVICES
# ============================================================================

  deploy:ws-go:
    desc: Deploy ws-go service to dedicated instance
    cmds:
      - echo "üì¶ Deploying ws-go..."

      # Copy source code and manifest
      - echo "üì§ Copying source files and manifest..."
      - gcloud compute scp --recurse ./src {{.WS_GO_INSTANCE}}:~/ --zone={{.GCP_ZONE}}
      - gcloud compute scp ./isolated/ws-go/docker-compose.yml {{.WS_GO_INSTANCE}}:~/docker-compose.template.yml --zone={{.GCP_ZONE}}

      # Substitute variables and deploy
      - echo "üìù Substituting variables (BACKEND_INTERNAL_IP={{.BACKEND_INTERNAL_IP}})..."
      - |
        gcloud compute ssh {{.WS_GO_INSTANCE}} --zone={{.GCP_ZONE}} --command='
          export BACKEND_INTERNAL_IP={{.BACKEND_INTERNAL_IP}}
          envsubst < docker-compose.template.yml > docker-compose.yml
          cat docker-compose.yml
        '

      # Build and start
      - echo "üöÄ Building and starting ws-go..."
      - gcloud compute ssh {{.WS_GO_INSTANCE}} --zone={{.GCP_ZONE}} --command='cd ~ && docker compose build'
      - gcloud compute ssh {{.WS_GO_INSTANCE}} --zone={{.GCP_ZONE}} --command='cd ~ && docker compose up -d'

      # Wait and check
      - echo "‚è≥ Waiting for ws-go to start..."
      - sleep 10
      - task: health:ws-go
      - echo "‚úÖ ws-go deployed"

  deploy:backend:
    desc: Deploy backend services (NATS, monitoring, publisher)
    cmds:
      - echo "üì¶ Deploying backend services..."

      # Copy manifests and configs
      - echo "üì§ Copying manifests and configuration files..."
      - gcloud compute scp ./isolated/backend/docker-compose.yml {{.BACKEND_INSTANCE}}:~/ --zone={{.GCP_ZONE}}
      - gcloud compute scp ./isolated/backend/prometheus.yml {{.BACKEND_INSTANCE}}:~/prometheus.template.yml --zone={{.GCP_ZONE}}
      - gcloud compute scp ./loki-config.yml {{.BACKEND_INSTANCE}}:~/ --zone={{.GCP_ZONE}}
      - gcloud compute scp ./promtail-config.yml {{.BACKEND_INSTANCE}}:~/ --zone={{.GCP_ZONE}}
      - gcloud compute scp --recurse ./grafana {{.BACKEND_INSTANCE}}:~/ --zone={{.GCP_ZONE}}
      - gcloud compute scp --recurse ./publisher {{.BACKEND_INSTANCE}}:~/ --zone={{.GCP_ZONE}}

      # Substitute Prometheus config variables
      - echo "üìù Substituting Prometheus variables (WS_GO_INTERNAL_IP={{.WS_GO_INTERNAL_IP}})..."
      - |
        gcloud compute ssh {{.BACKEND_INSTANCE}} --zone={{.GCP_ZONE}} --command='
          export WS_GO_INTERNAL_IP={{.WS_GO_INTERNAL_IP}}
          envsubst < prometheus.template.yml > prometheus.yml
          cat prometheus.yml
        '

      # Build and start
      - echo "üöÄ Building and starting backend services..."
      - gcloud compute ssh {{.BACKEND_INSTANCE}} --zone={{.GCP_ZONE}} --command='cd ~ && docker compose build'
      - gcloud compute ssh {{.BACKEND_INSTANCE}} --zone={{.GCP_ZONE}} --command='cd ~ && docker compose up -d'

      # Wait and check
      - echo "‚è≥ Waiting for services to start..."
      - sleep 15
      - task: health:backend
      - echo "‚úÖ Backend services deployed"

  deploy:all:
    desc: Deploy both instances (backend first, then ws-go)
    cmds:
      - task: deploy:backend
      - task: deploy:ws-go
      - echo ""
      - echo "üéâ Full deployment complete!"
      - task: info:all

# ============================================================================
# HEALTH & STATUS
# ============================================================================

  health:ws-go:
    desc: Check ws-go health
    cmds:
      - echo "üè• Checking ws-go health..."
      - |
        curl -s http://{{.WS_GO_EXTERNAL_IP}}:3004/health | jq '.' || echo "‚ùå Health check failed"

  health:backend:
    desc: Check backend services health
    cmds:
      - echo "üè• Checking backend services..."
      - echo ""
      - echo "üìä NATS status:"
      - gcloud compute ssh {{.BACKEND_INSTANCE}} --zone={{.GCP_ZONE}} --command='docker exec odin-nats nats server list' || echo "‚ùå NATS check failed"
      - echo ""
      - echo "üìà Prometheus status:"
      - curl -s http://{{.BACKEND_EXTERNAL_IP}}:9091/-/ready && echo "‚úÖ Prometheus ready" || echo "‚ùå Prometheus not ready"
      - echo ""
      - echo "üìâ Grafana status:"
      - curl -s http://{{.BACKEND_EXTERNAL_IP}}:3010/api/health | jq '.' || echo "‚ùå Grafana check failed"

  health:all:
    desc: Check health of all services
    cmds:
      - task: health:backend
      - echo ""
      - task: health:ws-go

  info:ws-go:
    desc: Show ws-go instance information
    cmds:
      - echo "üìç ws-go Instance Info:"
      - echo "   Name ‚Üí {{.WS_GO_INSTANCE}}"
      - echo "   Zone ‚Üí {{.GCP_ZONE}}"
      - echo "   External IP ‚Üí {{.WS_GO_EXTERNAL_IP}}"
      - echo "   Internal IP ‚Üí {{.WS_GO_INTERNAL_IP}}"
      - echo "   WebSocket ‚Üí ws://{{.WS_GO_EXTERNAL_IP}}:3004/ws"
      - echo "   Health ‚Üí http://{{.WS_GO_EXTERNAL_IP}}:3004/health"
      - echo "   Metrics ‚Üí http://{{.WS_GO_EXTERNAL_IP}}:3004/metrics"

  info:backend:
    desc: Show backend instance information
    cmds:
      - echo "üìç Backend Instance Info:"
      - echo "   Name ‚Üí {{.BACKEND_INSTANCE}}"
      - echo "   Zone ‚Üí {{.GCP_ZONE}}"
      - echo "   External IP ‚Üí {{.BACKEND_EXTERNAL_IP}}"
      - echo "   Internal IP ‚Üí {{.BACKEND_INTERNAL_IP}}"
      - echo "   Grafana ‚Üí http://{{.BACKEND_EXTERNAL_IP}}:3010"
      - echo "   Prometheus ‚Üí http://{{.BACKEND_EXTERNAL_IP}}:9091"
      - echo "   Publisher ‚Üí http://{{.BACKEND_EXTERNAL_IP}}:3003"

  info:all:
    desc: Show information for all instances
    cmds:
      - task: info:backend
      - echo ""
      - task: info:ws-go
      - echo ""
      - echo "üîó Quick Access:"
      - echo "   Grafana ‚Üí http://{{.BACKEND_EXTERNAL_IP}}:3010 (admin/admin)"
      - echo "   Test WS ‚Üí wscat -c ws://{{.WS_GO_EXTERNAL_IP}}:3004/ws"

# ============================================================================
# SSH & LOGS
# ============================================================================

  ssh:ws-go:
    desc: SSH into ws-go instance
    cmds:
      - gcloud compute ssh {{.WS_GO_INSTANCE}} --zone={{.GCP_ZONE}}

  ssh:backend:
    desc: SSH into backend instance
    cmds:
      - gcloud compute ssh {{.BACKEND_INSTANCE}} --zone={{.GCP_ZONE}}

  logs:ws-go:
    desc: Show ws-go logs
    cmds:
      - gcloud compute ssh {{.WS_GO_INSTANCE}} --zone={{.GCP_ZONE}} --command='docker compose logs -f --tail=100'

  logs:backend:
    desc: Show backend services logs
    cmds:
      - gcloud compute ssh {{.BACKEND_INSTANCE}} --zone={{.GCP_ZONE}} --command='docker compose logs -f --tail=100'

  logs:nats:
    desc: Show NATS logs
    cmds:
      - gcloud compute ssh {{.BACKEND_INSTANCE}} --zone={{.GCP_ZONE}} --command='docker logs -f odin-nats'

  logs:prometheus:
    desc: Show Prometheus logs
    cmds:
      - gcloud compute ssh {{.BACKEND_INSTANCE}} --zone={{.GCP_ZONE}} --command='docker logs -f odin-prometheus'

# ============================================================================
# TESTING
# ============================================================================

  test:connection:
    desc: Test WebSocket connection
    cmds:
      - echo "üß™ Testing WebSocket connection..."
      - wscat -c ws://{{.WS_GO_EXTERNAL_IP}}:3004/ws

  test:light:
    desc: Light load test (1,000 connections, 60s)
    cmds:
      - echo "üß™ Running light load test..."
      - WS_URL=ws://{{.WS_GO_EXTERNAL_IP}}:3004/ws TARGET_CONNECTIONS=1000 DURATION=60 node scripts/sustained-load-test.cjs

  test:medium:
    desc: Medium load test (5,000 connections, 300s)
    cmds:
      - echo "üß™ Running medium load test..."
      - WS_URL=ws://{{.WS_GO_EXTERNAL_IP}}:3004/ws TARGET_CONNECTIONS=5000 DURATION=300 node scripts/sustained-load-test.cjs

  test:capacity:
    desc: Capacity test (10,000 connections, 600s)
    cmds:
      - echo "üß™ Running capacity test..."
      - WS_URL=ws://{{.WS_GO_EXTERNAL_IP}}:3004/ws TARGET_CONNECTIONS=10000 DURATION=600 node scripts/sustained-load-test.cjs

  test:overload:
    desc: Overload test (12,000 connections, should reject gracefully)
    cmds:
      - echo "üß™ Running overload test (expect rejections)..."
      - WS_URL=ws://{{.WS_GO_EXTERNAL_IP}}:3004/ws TARGET_CONNECTIONS=12000 DURATION=300 node scripts/sustained-load-test.cjs

# ============================================================================
# RESTART & UPDATE
# ============================================================================

  restart:ws-go:
    desc: Restart ws-go service
    cmds:
      - echo "üîÑ Restarting ws-go..."
      - gcloud compute ssh {{.WS_GO_INSTANCE}} --zone={{.GCP_ZONE}} --command='docker compose restart'
      - sleep 5
      - task: health:ws-go

  restart:backend:
    desc: Restart backend services
    cmds:
      - echo "üîÑ Restarting backend services..."
      - gcloud compute ssh {{.BACKEND_INSTANCE}} --zone={{.GCP_ZONE}} --command='docker compose restart'
      - sleep 10
      - task: health:backend

  update:ws-go:
    desc: Update ws-go code and restart
    cmds:
      - echo "üì¶ Updating ws-go..."
      - gcloud compute scp --recurse ./src {{.WS_GO_INSTANCE}}:~/ --zone={{.GCP_ZONE}}
      - gcloud compute ssh {{.WS_GO_INSTANCE}} --zone={{.GCP_ZONE}} --command='cd ~ && docker compose build && docker compose up -d'
      - sleep 5
      - task: health:ws-go

  update:config:ws-go:
    desc: Update ws-go configuration (rebuild required)
    cmds:
      - echo "üìù Updating ws-go configuration..."
      - task: deploy:ws-go

# ============================================================================
# CLEANUP
# ============================================================================

  stop:ws-go:
    desc: Stop ws-go service (keep instance running)
    cmds:
      - echo "‚èπÔ∏è  Stopping ws-go..."
      - gcloud compute ssh {{.WS_GO_INSTANCE}} --zone={{.GCP_ZONE}} --command='docker compose down'

  stop:backend:
    desc: Stop backend services (keep instance running)
    cmds:
      - echo "‚èπÔ∏è  Stopping backend services..."
      - gcloud compute ssh {{.BACKEND_INSTANCE}} --zone={{.GCP_ZONE}} --command='docker compose down'

  delete:ws-go:
    desc: Delete ws-go instance
    cmds:
      - echo "üóëÔ∏è  Deleting ws-go instance..."
      - gcloud compute instances delete {{.WS_GO_INSTANCE}} --zone={{.GCP_ZONE}} --quiet

  delete:backend:
    desc: Delete backend instance
    cmds:
      - echo "üóëÔ∏è  Deleting backend instance..."
      - gcloud compute instances delete {{.BACKEND_INSTANCE}} --zone={{.GCP_ZONE}} --quiet

  delete:all:
    desc: Delete both instances
    cmds:
      - task: delete:ws-go
      - task: delete:backend
      - echo "‚úÖ All instances deleted"

  cleanup:firewall:
    desc: Delete firewall rules
    cmds:
      - echo "üóëÔ∏è  Cleaning up firewall rules..."
      - gcloud compute firewall-rules delete allow-websocket-isolated --quiet || true
      - gcloud compute firewall-rules delete allow-prometheus-scrape-isolated --quiet || true
      - gcloud compute firewall-rules delete allow-nats-internal --quiet || true
      - gcloud compute firewall-rules delete allow-grafana-isolated --quiet || true
      - gcloud compute firewall-rules delete allow-publisher-isolated --quiet || true
      - echo "‚úÖ Firewall rules cleaned up"

  cleanup:all:
    desc: Delete everything (instances + firewall rules)
    cmds:
      - task: delete:all
      - task: cleanup:firewall
      - echo "üéâ Complete cleanup done"
