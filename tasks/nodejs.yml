version: '3'

vars:
  NODE_SERVER_PORT: "3001"

tasks:
  server:
    desc: "🟢 Start Node.js WebSocket server (Odin implementation)"
    cmds:
      - |
        echo "Starting Node.js Odin WebSocket server..."
        npx tsx src/odin-server.ts &
        sleep 2
        echo "✅ Node.js server started on port {{.NODE_SERVER_PORT}}"
        echo "📊 Dashboard: http://localhost:{{.NODE_SERVER_PORT}}/dashboard"
        echo "📈 Metrics: http://localhost:{{.NODE_SERVER_PORT}}/api/metrics"
        echo "🩺 Health: http://localhost:{{.NODE_SERVER_PORT}}/health"

  server:clean:
    desc: "🧼 Start Clean Architecture Node.js server"
    cmds:
      - |
        echo "Starting Clean Architecture Node.js server..."
        npx tsx src/clean-server.ts &
        sleep 2
        echo "✅ Clean Architecture server started on port {{.NODE_SERVER_PORT}}"

  server:original:
    desc: "📜 Start original Node.js server (reference implementation)"
    cmds:
      - |
        echo "Starting original Node.js server..."
        npx tsx src/server.ts &
        sleep 2
        echo "✅ Original server started on port {{.NODE_SERVER_PORT}}"

  publisher:
    desc: "📡 Start Node.js price publisher"
    cmds:
      - |
        echo "Starting Node.js price publisher..."
        npx tsx src/odin-publisher.ts &
        sleep 1
        echo "✅ Publisher started - generating price updates"

  publisher:original:
    desc: "📡 Start original publisher"
    cmds:
      - |
        echo "Starting original publisher..."
        tsx src/publisher.ts &
        sleep 1
        echo "✅ Original publisher started"

  dev:
    desc: "🛠️  Development mode with hot reload"
    cmds:
      - echo "Starting Node.js development mode with hot reload..."
      - npx tsx --watch src/odin-server.ts

  dev:publisher:
    desc: "🛠️  Publisher development mode with hot reload"
    cmds:
      - echo "Starting publisher development mode with hot reload..."
      - npx tsx --watch src/odin-publisher.ts

  test:connection:
    desc: "🧪 Test Node.js server connectivity"
    cmds:
      - |
        echo "Testing Node.js server connectivity..."
        if curl -s http://localhost:{{.NODE_SERVER_PORT}}/health | jq -r '.status' | grep -q "healthy"; then
          echo "✅ Node.js server is healthy"
        else
          echo "❌ Node.js server is not healthy"
          exit 1
        fi

  metrics:
    desc: "📊 Show current Node.js metrics"
    cmds:
      - |
        echo "📊 Node.js Server Metrics:"
        curl -s http://localhost:{{.NODE_SERVER_PORT}}/api/metrics | jq -r '
          "Connections: " + (.data.connections.active | tostring) +
          "\nMessages/sec: " + (.data.messages.perSecond | tostring) +
          "\nUptime: " + (.data.system.uptime | tostring) + "ms" +
          "\nHealth: " + .data.system.health'

  dashboard:
    desc: "🖥️  Open Node.js metrics dashboard"
    cmds:
      - open http://localhost:{{.NODE_SERVER_PORT}}/dashboard

  logs:
    desc: "📜 Show server logs (if running)"
    cmds:
      - echo "Node.js server logs (use Ctrl+C to exit):"
      - tail -f logs/odin-server.log 2>/dev/null || echo "No log file found"

  stop:
    desc: "🛑 Stop all Node.js processes"
    cmds:
      - echo "Stopping Node.js processes..."
      - pkill -f "tsx src" || true
      - echo "✅ Node.js processes stopped"

  auth:token:
    desc: "🔑 Generate authentication token for testing"
    cmds:
      - |
        echo "Generating authentication token..."
        tsx src/utils/auth-token.ts

  lint:
    desc: "🔍 Run TypeScript linting"
    cmds:
      - echo "Running ESLint..."
      - npm run lint

  lint:fix:
    desc: "🔧 Fix TypeScript linting issues"
    cmds:
      - echo "Fixing ESLint issues..."
      - npm run lint:fix

  format:
    desc: "💅 Format TypeScript code"
    cmds:
      - echo "Formatting code with Prettier..."
      - npm run format

  typecheck:
    desc: "🔍 Run TypeScript type checking"
    cmds:
      - echo "Running TypeScript type check..."
      - npm run typecheck

  quality:
    desc: "✨ Run all code quality checks"
    cmds:
      - task: typecheck
      - task: lint
      - echo "✅ All quality checks passed"