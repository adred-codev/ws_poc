version: '3'

vars:
  CLIENT_PORT: "5173"
  CLIENT_BUILD_PORT: "8080"
  NODE_SERVER_PORT: "3001"
  GO_SERVER_PORT: "3002"

tasks:
  # React client tasks (primary)
  install:
    desc: "üì¶ Install React client dependencies"
    dir: client-react
    cmds:
      - npm install
      - echo "‚úÖ React client dependencies installed"

  dev:
    desc: "üõ†Ô∏è Start React client in development mode"
    dir: client-react
    cmds:
      - echo "Starting React client development server..."
      - npm run dev

  build:
    desc: "üî® Build React client for production"
    dir: client-react
    cmds:
      - echo "Building React client..."
      - npm run build
      - echo "‚úÖ React client built successfully"

  serve:
    desc: "üåê Serve React client (development)"
    dir: client-react
    cmds:
      - |
        echo "Starting React client on http://localhost:{{.CLIENT_PORT}}"
        npm run dev &
        sleep 2
        echo "‚úÖ React client running"
        echo "üìä Dashboard: http://localhost:{{.CLIENT_PORT}}"

  preview:
    desc: "üëÅÔ∏è Preview production build"
    dir: client-react
    cmds:
      - echo "Previewing production build..."
      - npm run preview

  # Legacy HTML client tasks
  serve:legacy:
    desc: "üåê Serve legacy HTML client on port {{.CLIENT_BUILD_PORT}}"
    cmds:
      - |
        echo "Starting legacy web client server..."
        python3 -m http.server {{.CLIENT_BUILD_PORT}} --directory client &
        sleep 1
        echo "‚úÖ Legacy client server started on port {{.CLIENT_BUILD_PORT}}"
        echo "üåê Client: http://localhost:{{.CLIENT_BUILD_PORT}}"

  serve:php:
    desc: "üêò Serve web client using PHP (alternative)"
    cmds:
      - |
        if command -v php &> /dev/null; then
          echo "Starting PHP client server..."
          cd client && php -S localhost:{{.CLIENT_PORT}} &
          sleep 1
          echo "‚úÖ PHP client server started on port {{.CLIENT_PORT}}"
        else
          echo "‚ùå PHP not available, use 'task client:serve' instead"
          exit 1
        fi

  serve:node:
    desc: "üü¢ Serve web client using Node.js http-server (alternative)"
    cmds:
      - |
        if command -v npx &> /dev/null; then
          echo "Starting Node.js client server..."
          npx http-server client -p {{.CLIENT_PORT}} --cors &
          sleep 1
          echo "‚úÖ Node.js client server started on port {{.CLIENT_PORT}}"
        else
          echo "‚ùå Node.js/npx not available, use 'task client:serve' instead"
          exit 1
        fi

  open:
    desc: "üñ•Ô∏è  Open React client in browser"
    cmds:
      - |
        if curl -s http://localhost:{{.CLIENT_PORT}} > /dev/null; then
          open http://localhost:{{.CLIENT_PORT}}
        else
          echo "‚ùå React client not running. Start with: task client:serve"
          exit 1
        fi

  open:node:
    desc: "üü¢ Open client connected to Node.js server"
    cmds:
      - |
        echo "Opening client for Node.js server (port {{.NODE_SERVER_PORT}})..."
        if curl -s http://localhost:{{.CLIENT_PORT}} > /dev/null; then
          # Create a modified client that connects to Node.js server
          open "http://localhost:{{.CLIENT_PORT}}?server=node&port={{.NODE_SERVER_PORT}}"
        else
          echo "‚ùå Client server not running. Start with: task client:serve"
          exit 1
        fi

  open:go:
    desc: "‚ö° Open client connected to Go server"
    cmds:
      - |
        echo "Opening client for Go server (port {{.GO_SERVER_PORT}})..."
        if curl -s http://localhost:{{.CLIENT_PORT}} > /dev/null; then
          # Create a modified client that connects to Go server
          open "http://localhost:{{.CLIENT_PORT}}?server=go&port={{.GO_SERVER_PORT}}"
        else
          echo "‚ùå Client server not running. Start with: task client:serve"
          exit 1
        fi

  test:node:
    desc: "üß™ Test client connection to Node.js server"
    cmds:
      - |
        echo "Testing client connection to Node.js server..."
        if curl -s http://localhost:{{.NODE_SERVER_PORT}}/health > /dev/null; then
          echo "‚úÖ Node.js server is reachable from client"
          echo "üåê WebSocket URL: ws://localhost:{{.NODE_SERVER_PORT}}/ws"
        else
          echo "‚ùå Node.js server is not reachable"
          exit 1
        fi

  test:go:
    desc: "üß™ Test client connection to Go server"
    cmds:
      - |
        echo "Testing client connection to Go server..."
        if curl -s http://localhost:{{.GO_SERVER_PORT}}/health > /dev/null; then
          echo "‚úÖ Go server is reachable from client"
          echo "üåê WebSocket URL: ws://localhost:{{.GO_SERVER_PORT}}/ws"
        else
          echo "‚ùå Go server is not reachable"
          exit 1
        fi

  stop:
    desc: "üõë Stop client server"
    cmds:
      - |
        echo "Stopping client server..."
        pkill -f "python3 -m http.server {{.CLIENT_PORT}}" || true
        pkill -f "php -S localhost:{{.CLIENT_PORT}}" || true
        pkill -f "http-server.*{{.CLIENT_PORT}}" || true
        echo "‚úÖ Client server stopped"

  status:
    desc: "üìä Check client server status"
    cmds:
      - |
        echo "Checking client server status..."
        if curl -s http://localhost:{{.CLIENT_PORT}} > /dev/null; then
          echo "‚úÖ Client server is running on port {{.CLIENT_PORT}}"
          echo "üåê Available at: http://localhost:{{.CLIENT_PORT}}"
        else
          echo "‚ùå Client server is not running"
          echo "üí° Start with: task client:serve"
        fi

  update:node-config:
    desc: "üîß Update client to connect to Node.js server by default"
    cmds:
      - |
        echo "Updating client default configuration for Node.js server..."
        sed -i.bak "s/ws:\/\/localhost:[0-9]*/ws:\/\/localhost:{{.NODE_SERVER_PORT}}/g" client/index.html
        sed -i.bak "s/http:\/\/localhost:[0-9]*/http:\/\/localhost:{{.NODE_SERVER_PORT}}/g" client/index.html
        echo "‚úÖ Client configured for Node.js server (port {{.NODE_SERVER_PORT}})"

  update:go-config:
    desc: "üîß Update client to connect to Go server by default"
    cmds:
      - |
        echo "Updating client default configuration for Go server..."
        sed -i.bak "s/ws:\/\/localhost:[0-9]*/ws:\/\/localhost:{{.GO_SERVER_PORT}}/g" client/index.html
        sed -i.bak "s/http:\/\/localhost:[0-9]*/http:\/\/localhost:{{.GO_SERVER_PORT}}/g" client/index.html
        echo "‚úÖ Client configured for Go server (port {{.GO_SERVER_PORT}})"

  restore:config:
    desc: "üîÑ Restore original client configuration"
    cmds:
      - |
        if [ -f client/index.html.bak ]; then
          echo "Restoring original client configuration..."
          mv client/index.html.bak client/index.html
          echo "‚úÖ Original client configuration restored"
        else
          echo "‚ö†Ô∏è  No backup found, configuration unchanged"
        fi

  clean:
    desc: "üßπ Clean up client backup files"
    cmds:
      - |
        echo "Cleaning up client backup files..."
        rm -f client/index.html.bak
        echo "‚úÖ Client cleanup complete"