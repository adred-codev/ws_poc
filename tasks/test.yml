version: '3'

vars:
  NODE_SERVER_PORT: "3001"
  GO_SERVER_PORT: "3002"
  PUBLISHER_PORT: "3003"

tasks:
  # Connectivity Tests
  connectivity:
    desc: "🔗 Test connectivity to all services"
    cmds:
      - |
        echo "🔗 Testing Service Connectivity"
        echo "==============================="
        echo ""

        echo "NATS Server:"
        if curl -s http://localhost:4222 > /dev/null 2>&1; then
          echo "  ✅ NATS reachable"
        else
          echo "  ❌ NATS not reachable"
        fi

        echo "Node.js WebSocket Server:"
        if curl -s http://localhost:{{.NODE_SERVER_PORT}}/health > /dev/null 2>&1; then
          echo "  ✅ Node.js server healthy"
        else
          echo "  ❌ Node.js server not healthy"
        fi

        echo "Go WebSocket Server:"
        if curl -s http://localhost:{{.GO_SERVER_PORT}}/health > /dev/null 2>&1; then
          echo "  ✅ Go server healthy"
        else
          echo "  ❌ Go server not healthy"
        fi

        echo "Publisher Service:"
        if curl -s http://localhost:{{.PUBLISHER_PORT}}/health > /dev/null 2>&1; then
          echo "  ✅ Publisher healthy"
        else
          echo "  ❌ Publisher not healthy"
        fi

  # WebSocket Connection Tests
  websocket:node:
    desc: "🧪 Test Node.js WebSocket connection"
    cmds:
      - |
        echo "🧪 Testing Node.js WebSocket Connection"
        echo "======================================="
        node -e "
        const WebSocket = require('ws');
        console.log('Connecting to Node.js WebSocket...');
        const ws = new WebSocket('ws://localhost:{{.NODE_SERVER_PORT}}/ws');

        ws.on('open', () => {
          console.log('✅ Connected to Node.js WebSocket');
          ws.send(JSON.stringify({type: 'ping', timestamp: Date.now()}));
        });

        ws.on('message', (data) => {
          const msg = JSON.parse(data.toString());
          console.log('📨 Received:', msg.type);
          if (msg.type === 'pong') {
            console.log('✅ Ping/pong successful');
            ws.close();
            process.exit(0);
          }
        });

        ws.on('error', (err) => {
          console.error('❌ WebSocket error:', err.message);
          process.exit(1);
        });

        setTimeout(() => {
          console.error('❌ Connection timeout');
          process.exit(1);
        }, 5000);
        "

  websocket:go:
    desc: "🧪 Test Go WebSocket connection"
    cmds:
      - |
        echo "🧪 Testing Go WebSocket Connection"
        echo "==================================="
        node -e "
        const WebSocket = require('ws');
        console.log('Connecting to Go WebSocket...');
        const ws = new WebSocket('ws://localhost:{{.GO_SERVER_PORT}}/ws');

        ws.on('open', () => {
          console.log('✅ Connected to Go WebSocket');
          ws.send(JSON.stringify({type: 'ping', timestamp: Date.now()}));
        });

        ws.on('message', (data) => {
          const msg = JSON.parse(data.toString());
          console.log('📨 Received:', msg.type);
          if (msg.type === 'pong') {
            console.log('✅ Ping/pong successful');
            ws.close();
            process.exit(0);
          }
        });

        ws.on('error', (err) => {
          console.error('❌ WebSocket error:', err.message);
          process.exit(1);
        });

        setTimeout(() => {
          console.error('❌ Connection timeout');
          process.exit(1);
        }, 5000);
        "

  websocket:both:
    desc: "🧪 Test both WebSocket servers"
    cmds:
      - task: websocket:node
      - echo ""
      - task: websocket:go

  # Performance Tests
  compare:
    desc: "🆚 Compare Node.js vs Go WebSocket performance"
    cmds:
      - |
        echo "🆚 WebSocket Performance Comparison"
        echo "===================================="
        echo ""

        # Check both servers are running
        if ! curl -s http://localhost:{{.NODE_SERVER_PORT}}/health > /dev/null; then
          echo "❌ Node.js server not running. Start with: task start:node"
          exit 1
        fi

        if ! curl -s http://localhost:{{.GO_SERVER_PORT}}/health > /dev/null; then
          echo "❌ Go server not running. Start with: task start:go"
          exit 1
        fi

        echo "📊 Pre-test metrics:"
        echo "Node.js connections:" $(curl -s http://localhost:{{.NODE_SERVER_PORT}}/health | jq -r '.websocket.currentConnections // 0')
        echo "Go connections:" $(curl -s http://localhost:{{.GO_SERVER_PORT}}/health | jq -r '.services.websocket.clients // 0')
        echo ""

        echo "🧪 Running concurrent WebSocket tests..."
        echo "Testing 10 connections to each server..."

        # Test both servers concurrently
        (
          echo "Testing Node.js..."
          for i in {1..10}; do
            (node -e "
              const WebSocket = require('ws');
              const ws = new WebSocket('ws://localhost:{{.NODE_SERVER_PORT}}/ws');
              ws.on('open', () => ws.send(JSON.stringify({type: 'ping', timestamp: Date.now()})));
              ws.on('message', () => setTimeout(() => ws.close(), 1000));
              ws.on('error', () => {});
            " &)
          done
          wait
        ) &

        (
          echo "Testing Go..."
          for i in {1..10}; do
            (node -e "
              const WebSocket = require('ws');
              const ws = new WebSocket('ws://localhost:{{.GO_SERVER_PORT}}/ws');
              ws.on('open', () => ws.send(JSON.stringify({type: 'ping', timestamp: Date.now()})));
              ws.on('message', () => setTimeout(() => ws.close(), 1000));
              ws.on('error', () => {});
            " &)
          done
          wait
        ) &

        wait
        sleep 2

        echo ""
        echo "📊 Post-test metrics:"
        echo "Node.js:" $(curl -s http://localhost:{{.NODE_SERVER_PORT}}/health | jq -r '.websocket.currentConnections // 0') "connections," $(curl -s http://localhost:{{.NODE_SERVER_PORT}}/health | jq -r '.websocket.totalDelivered // 0') "messages"
        echo "Go:" $(curl -s http://localhost:{{.GO_SERVER_PORT}}/health | jq -r '.services.websocket.clients // 0') "connections"
        echo ""
        echo "✅ Performance comparison complete"

  # Publisher-driven stress test
  stress:publisher:
    desc: "🧪 Run publisher-controlled stress test"
    cmds:
      - |
        echo "🧪 Publisher-Controlled Stress Test"
        echo "===================================="

        if ! curl -s http://localhost:{{.PUBLISHER_PORT}}/health > /dev/null; then
          echo "❌ Publisher not running. Start with: task start"
          exit 1
        fi

        echo "📊 Starting 60-second stress test..."
        echo "Configuration: 100 msg/sec, 500 connections, 60s duration"
        echo ""

        # Start stress test
        curl -s -X POST http://localhost:{{.PUBLISHER_PORT}}/control \
          -H "Content-Type: application/json" \
          -d '{
            "action": "start",
            "messagesPerSecond": 100,
            "connections": 500,
            "duration": 60000,
            "tokens": ["BTC", "ETH", "SOL", "DOGE"]
          }' | jq .

        echo ""
        echo "⏳ Test running... monitoring for 60 seconds"

        # Monitor progress
        for i in {1..12}; do
          sleep 5
          stats=$(curl -s http://localhost:{{.PUBLISHER_PORT}}/stats)
          published=$(echo "$stats" | jq -r '.stats.messagesPublished // 0')
          publishing=$(echo "$stats" | jq -r '.isPublishing // false')
          echo "📊 $((i*5))s: $published messages published, active: $publishing"
        done

        echo ""
        echo "📊 Final Results:"
        curl -s http://localhost:{{.PUBLISHER_PORT}}/stats | jq .

  # Load test using external script
  load:quick:
    desc: "🧪 Quick load test (if load-test script exists)"
    cmds:
      - |
        if [ -f "src/load-test.ts" ]; then
          echo "🧪 Running quick load test..."
          echo "Testing Node.js server: ws://localhost:{{.NODE_SERVER_PORT}}/ws"
          npx tsx src/load-test.ts ws://localhost:{{.NODE_SERVER_PORT}}/ws 100 30
        else
          echo "⚠️  Load test script not found. Using basic WebSocket test..."
          task: websocket:both
        fi

  # Cleanup
  clean:
    desc: "🧹 Clean up test artifacts"
    cmds:
      - |
        echo "🧹 Cleaning up test artifacts..."
        rm -rf test-results/ metrics/ logs/ || true
        echo "✅ Test cleanup complete"