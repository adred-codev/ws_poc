version: '3'

vars:
  NODE_SERVER_PORT: "3001"
  GO_SERVER_PORT: "3002"
  METRICS_DIR: "metrics"

tasks:
  # Quick Tests
  quick:
    desc: "🧪 Quick load test (100 connections) on available server"
    cmds:
      - |
        if curl -s http://localhost:{{.NODE_SERVER_PORT}}/health > /dev/null; then
          echo "🟢 Testing Node.js server..."
          task test:quick:node
        elif curl -s http://localhost:{{.GO_SERVER_PORT}}/health > /dev/null; then
          echo "⚡ Testing Go server..."
          task test:quick:go
        else
          echo "❌ No servers running. Start with 'task start' or 'task start:go'"
          exit 1
        fi

  quick:node:
    desc: "🧪 Quick load test against Node.js server"
    cmds:
      - |
        echo "🧪 Running quick load test against Node.js server..."
        WS_URL=ws://localhost:{{.NODE_SERVER_PORT}}/ws npm run load-test:quick

  quick:go:
    desc: "🧪 Quick load test against Go server"
    cmds:
      - |
        echo "🧪 Running quick load test against Go server..."
        WS_URL=ws://localhost:{{.GO_SERVER_PORT}}/ws npm run load-test:quick

  # Medium Tests
  medium:node:
    desc: "🧪 Medium load test (1000 connections) against Node.js server"
    cmds:
      - |
        echo "🧪 Running medium load test against Node.js server..."
        WS_URL=ws://localhost:{{.NODE_SERVER_PORT}}/ws npm run load-test:medium

  medium:go:
    desc: "🧪 Medium load test (1000 connections) against Go server"
    cmds:
      - |
        echo "🧪 Running medium load test against Go server..."
        WS_URL=ws://localhost:{{.GO_SERVER_PORT}}/ws npm run load-test:medium

  # Stress Tests
  stress:node:
    desc: "🧪 Stress test (5000 connections) against Node.js server"
    cmds:
      - |
        echo "🧪 Running stress test against Node.js server..."
        echo "⚠️  This may take several minutes and use significant resources"
        WS_URL=ws://localhost:{{.NODE_SERVER_PORT}}/ws npm run load-test:stress

  stress:go:
    desc: "🧪 Stress test (5000 connections) against Go server"
    cmds:
      - |
        echo "🧪 Running stress test against Go server..."
        echo "⚠️  This may take several minutes and use significant resources"
        WS_URL=ws://localhost:{{.GO_SERVER_PORT}}/ws npm run load-test:stress

  # Progressive Tests
  progressive:node:
    desc: "🧪 Progressive load test (100→1K→5K) against Node.js server"
    cmds:
      - |
        echo "🧪 Running progressive load test against Node.js server..."
        echo "⚠️  This will take 15+ minutes and use significant resources"
        WS_URL=ws://localhost:{{.NODE_SERVER_PORT}}/ws npm run load-test:progressive

  progressive:go:
    desc: "🧪 Progressive load test (100→1K→5K) against Go server"
    cmds:
      - |
        echo "🧪 Running progressive load test against Go server..."
        echo "⚠️  This will take 15+ minutes and use significant resources"
        WS_URL=ws://localhost:{{.GO_SERVER_PORT}}/ws npm run load-test:progressive

  # Comparison Tests
  compare:quick:
    desc: "🆚 Quick performance comparison between Node.js and Go"
    cmds:
      - |
        echo "🆚 Quick Performance Comparison"
        echo "==============================="
        timestamp=$(date +%Y%m%d_%H%M%S)
        mkdir -p {{.METRICS_DIR}}/comparison

        # Ensure both servers are running
        if ! curl -s http://localhost:{{.NODE_SERVER_PORT}}/health > /dev/null; then
          echo "❌ Node.js server not running on port {{.NODE_SERVER_PORT}}"
          exit 1
        fi
        if ! curl -s http://localhost:{{.GO_SERVER_PORT}}/health > /dev/null; then
          echo "❌ Go server not running on port {{.GO_SERVER_PORT}}"
          exit 1
        fi

        # Collect baseline metrics
        echo "📊 Collecting baseline metrics..."
        task metrics:collect:all

        # Test Node.js
        echo ""
        echo "🟢 Testing Node.js Server..."
        echo "=============================="
        WS_URL=ws://localhost:{{.NODE_SERVER_PORT}}/ws npm run load-test:quick > {{.METRICS_DIR}}/comparison/node_quick_${timestamp}.log 2>&1
        task metrics:node:current > {{.METRICS_DIR}}/comparison/node_metrics_${timestamp}.txt

        # Wait between tests
        echo "⏳ Waiting 30 seconds between tests..."
        sleep 30

        # Test Go
        echo ""
        echo "⚡ Testing Go Server..."
        echo "======================"
        WS_URL=ws://localhost:{{.GO_SERVER_PORT}}/ws npm run load-test:quick > {{.METRICS_DIR}}/comparison/go_quick_${timestamp}.log 2>&1
        task metrics:go:current > {{.METRICS_DIR}}/comparison/go_metrics_${timestamp}.txt

        # Generate comparison report
        echo ""
        echo "📋 Generating Comparison Report..."
        task test:generate:comparison:report

  compare:stress:
    desc: "🆚 Stress test comparison between Node.js and Go"
    cmds:
      - |
        echo "🆚 Stress Test Comparison"
        echo "========================="
        echo "⚠️  This will take 20+ minutes and use significant resources"
        echo "🔄 Continue? (Ctrl+C to cancel, Enter to proceed)"
        read

        timestamp=$(date +%Y%m%d_%H%M%S)
        mkdir -p {{.METRICS_DIR}}/stress_comparison

        # Test Node.js stress
        echo ""
        echo "🟢 Node.js Stress Test..."
        WS_URL=ws://localhost:{{.NODE_SERVER_PORT}}/ws npm run load-test:stress > {{.METRICS_DIR}}/stress_comparison/node_stress_${timestamp}.log 2>&1

        # Wait between tests
        echo "⏳ Waiting 2 minutes between tests..."
        sleep 120

        # Test Go stress
        echo ""
        echo "⚡ Go Stress Test..."
        WS_URL=ws://localhost:{{.GO_SERVER_PORT}}/ws npm run load-test:stress > {{.METRICS_DIR}}/stress_comparison/go_stress_${timestamp}.log 2>&1

        echo "✅ Stress comparison complete. Results in {{.METRICS_DIR}}/stress_comparison/"

  compare:performance:
    desc: "🆚 Comprehensive performance comparison with metrics collection"
    cmds:
      - |
        echo "🆚 Comprehensive Performance Comparison"
        echo "======================================="
        timestamp=$(date +%Y%m%d_%H%M%S)
        mkdir -p {{.METRICS_DIR}}/performance

        # Pre-test metrics
        echo "📊 Collecting pre-test metrics..."
        task metrics:collect:all

        # Node.js tests
        echo ""
        echo "🟢 Node.js Performance Tests..."
        echo "================================"
        task test:quick:node > {{.METRICS_DIR}}/performance/node_quick_${timestamp}.log 2>&1
        task metrics:node:current > {{.METRICS_DIR}}/performance/node_post_quick_${timestamp}.txt

        sleep 30

        task test:medium:node > {{.METRICS_DIR}}/performance/node_medium_${timestamp}.log 2>&1
        task metrics:node:current > {{.METRICS_DIR}}/performance/node_post_medium_${timestamp}.txt

        # Wait between server tests
        echo "⏳ Waiting 2 minutes between server tests..."
        sleep 120

        # Go tests
        echo ""
        echo "⚡ Go Performance Tests..."
        echo "========================="
        task test:quick:go > {{.METRICS_DIR}}/performance/go_quick_${timestamp}.log 2>&1
        task metrics:go:current > {{.METRICS_DIR}}/performance/go_post_quick_${timestamp}.txt

        sleep 30

        task test:medium:go > {{.METRICS_DIR}}/performance/go_medium_${timestamp}.log 2>&1
        task metrics:go:current > {{.METRICS_DIR}}/performance/go_post_medium_${timestamp}.txt

        # Generate comprehensive report
        echo ""
        echo "📋 Generating comprehensive performance report..."
        task test:generate:performance:report

  # Connectivity Tests
  connectivity:
    desc: "🔗 Test connectivity to all servers"
    cmds:
      - |
        echo "🔗 Testing Connectivity"
        echo "======================="

        echo "NATS Server:"
        if curl -s http://localhost:4222 > /dev/null; then
          echo "  ✅ NATS reachable"
        else
          echo "  ❌ NATS not reachable"
        fi

        echo "Node.js Server:"
        if curl -s http://localhost:{{.NODE_SERVER_PORT}}/health > /dev/null; then
          echo "  ✅ Node.js server healthy"
        else
          echo "  ❌ Node.js server not healthy"
        fi

        echo "Go Server:"
        if curl -s http://localhost:{{.GO_SERVER_PORT}}/health > /dev/null; then
          echo "  ✅ Go server healthy"
        else
          echo "  ❌ Go server not healthy"
        fi

  # Report Generation
  generate:comparison:report:
    desc: "📋 Generate detailed comparison report from collected data"
    cmds:
      - |
        echo "📋 Performance Comparison Report"
        echo "================================"
        echo "Generated: $(date)"
        echo ""

        if [ -d "{{.METRICS_DIR}}/comparison" ]; then
          echo "📁 Analysis based on data in {{.METRICS_DIR}}/comparison/"
          echo ""

          # Find latest test files
          node_log=$(ls {{.METRICS_DIR}}/comparison/node_quick_*.log 2>/dev/null | tail -1)
          go_log=$(ls {{.METRICS_DIR}}/comparison/go_quick_*.log 2>/dev/null | tail -1)

          if [ -f "$node_log" ]; then
            echo "🟢 Node.js Results:"
            grep -E "(Total Attempted|Successful|Average Rate|Average.*ms)" "$node_log" | head -5
            echo ""
          fi

          if [ -f "$go_log" ]; then
            echo "⚡ Go Results:"
            grep -E "(Total Attempted|Successful|Average Rate|Average.*ms)" "$go_log" | head -5
            echo ""
          fi

          echo "💡 Detailed logs available in {{.METRICS_DIR}}/comparison/"
        else
          echo "⚠️  No comparison data found. Run 'task test:compare:quick' first."
        fi

  generate:performance:report:
    desc: "📋 Generate comprehensive performance report"
    cmds:
      - |
        echo "📋 Comprehensive Performance Report"
        echo "==================================="
        echo "Generated: $(date)"
        echo ""

        if [ -d "{{.METRICS_DIR}}/performance" ]; then
          echo "📁 Analysis based on data in {{.METRICS_DIR}}/performance/"
          echo ""
          echo "🔍 Run 'ls {{.METRICS_DIR}}/performance/' to see all collected data"
          echo "📊 Use 'task metrics:generate:report' for current live metrics"
        else
          echo "⚠️  No performance data found. Run 'task test:compare:performance' first."
        fi

  # Cleanup
  clean:
    desc: "🧹 Clean up test results and metrics"
    cmds:
      - |
        echo "🧹 Cleaning up test results..."
        rm -rf {{.METRICS_DIR}}/comparison {{.METRICS_DIR}}/performance {{.METRICS_DIR}}/stress_comparison
        echo "✅ Test cleanup complete"