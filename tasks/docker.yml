version: '3'

vars:
  COMPOSE_PROJECT: "odin-ws"

tasks:
  up:
    desc: "🐳 Start all containers with Docker Compose"
    cmds:
      - docker-compose up -d
      - echo "✅ All services starting..."
      - sleep 5
      - task: status

  down:
    desc: "🛑 Stop and remove all containers"
    cmds:
      - docker-compose down
      - echo "✅ All containers stopped"

  build:
    desc: "🔨 Build all Docker images"
    cmds:
      - echo "Building all Docker images..."
      - docker-compose build --parallel
      - echo "✅ All images built"

  rebuild:
    desc: "🔄 Rebuild and restart all services"
    cmds:
      - task: down
      - task: build
      - task: up

  logs:
    desc: "📜 Show logs from all containers"
    cmds:
      - docker-compose logs -f

  logs:nats:
    desc: "📜 Show NATS logs"
    cmds:
      - docker-compose logs -f nats

  logs:go:
    desc: "📜 Show Go server logs"
    cmds:
      - docker-compose logs -f ws-go

  logs:node:
    desc: "📜 Show Node.js server logs"
    cmds:
      - docker-compose logs -f ws-node

  logs:publisher:
    desc: "📜 Show publisher logs"
    cmds:
      - docker-compose logs -f publisher

  status:
    desc: "📊 Show container status and resource usage"
    cmds:
      - echo "🐳 Container Status:"
      - docker-compose ps
      - echo ""
      - echo "📊 Resource Usage:"
      - docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}" $(docker-compose ps -q) || true

  test:quick:
    desc: "🧪 Quick load test against both containerized servers"
    cmds:
      - echo "Testing Node.js container..."
      - WS_URL=ws://localhost:3001/ws npm run load-test:quick
      - echo ""
      - echo "Testing Go container..."
      - WS_URL=ws://localhost:3002/ws npm run load-test:quick

  test:stress:
    desc: "🔥 Stress test both containerized servers"
    cmds:
      - echo "Stress testing Node.js container..."
      - WS_URL=ws://localhost:3001/ws npm run load-test:stress
      - echo ""
      - echo "Stress testing Go container..."
      - WS_URL=ws://localhost:3002/ws npm run load-test:stress

  test:compare:
    desc: "⚖️ Compare performance of containerized servers"
    cmds:
      - |
        echo "🆚 Comparing containerized server performance..."
        echo "Both servers have identical resource constraints:"
        echo "  - CPU: 2 cores max, 1 core guaranteed"
        echo "  - Memory: 512MB max, 256MB guaranteed"
        echo "  - PIDs: 200 max"
        echo "  - Disk I/O: weight 500"
        echo ""
      - task: test:quick

  monitor:
    desc: "📈 Monitor real-time resource usage"
    cmds:
      - docker stats $(docker-compose ps -q)

  shell:nats:
    desc: "🐚 Open shell in NATS container"
    cmds:
      - docker-compose exec nats sh

  shell:go:
    desc: "🐚 Open shell in Go server container"
    cmds:
      - docker-compose exec ws-go sh

  shell:node:
    desc: "🐚 Open shell in Node.js server container"
    cmds:
      - docker-compose exec ws-node sh

  restart:
    desc: "🔄 Restart a specific service"
    cmds:
      - docker-compose restart {{.SERVICE}}
    vars:
      SERVICE: '{{.SERVICE | default "ws-go ws-node"}}'

  scale:publisher:
    desc: "📈 Scale publisher instances"
    cmds:
      - docker-compose up -d --scale publisher={{.COUNT}}
    vars:
      COUNT: '{{.COUNT | default "2"}}'

  clean:
    desc: "🧹 Clean up Docker resources"
    cmds:
      - task: down
      - docker-compose rm -f
      - docker volume rm {{.COMPOSE_PROJECT}}_nats_data || true
      - echo "✅ Docker cleanup complete"