# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  GO_SERVER_PORT: "3002"
  GO_METRICS_PORT: "9090"
  BINARY_NAME: "odin-ws-server"

tasks:
  build:
    desc: "🔨 Build Go WebSocket server"
    dir: go-server
    cmds:
      - |
        echo "Building Go WebSocket server..."
        mkdir -p build
        go build -o build/{{.BINARY_NAME}} ./cmd/main.go
        echo "✅ Go server built successfully"
        echo "📁 Binary: go-server/build/{{.BINARY_NAME}}"

  build:all:
    desc: "🔨 Build for multiple platforms"
    dir: go-server
    cmds:
      - |
        echo "Building for multiple platforms..."
        mkdir -p build
        GOOS=linux GOARCH=amd64 go build -o build/{{.BINARY_NAME}}-linux-amd64 ./cmd/main.go
        GOOS=darwin GOARCH=amd64 go build -o build/{{.BINARY_NAME}}-darwin-amd64 ./cmd/main.go
        GOOS=windows GOARCH=amd64 go build -o build/{{.BINARY_NAME}}-windows-amd64.exe ./cmd/main.go
        echo "✅ Multi-platform build complete"

  server:
    desc: "⚡ Start Go WebSocket server"
    deps: [build]
    cmds:
      - |
        echo "Starting Go WebSocket server..."
        ./go-server/build/{{.BINARY_NAME}} &
        sleep 2
        echo "✅ Go server started on port {{.GO_SERVER_PORT}}"
        echo "📊 Prometheus: http://localhost:{{.GO_SERVER_PORT}}/metrics"
        echo "📈 Stats: http://localhost:{{.GO_SERVER_PORT}}/stats"
        echo "🩺 Health: http://localhost:{{.GO_SERVER_PORT}}/health"

  dev:
    desc: "🛠️  Development mode with config file"
    deps: [build]
    cmds:
      - |
        echo "Starting Go server in development mode..."
        ./go-server/build/{{.BINARY_NAME}} -config=go-server/config.json

  test:connection:
    desc: "🧪 Test Go server connectivity"
    cmds:
      - |
        echo "Testing Go server connectivity..."
        if curl -s http://localhost:{{.GO_SERVER_PORT}}/health | jq -r '.status' | grep -q "healthy"; then
          echo "✅ Go server is healthy"
        else
          echo "❌ Go server is not healthy"
          exit 1
        fi

  metrics:
    desc: "📊 Show current Go server metrics"
    cmds:
      - |
        echo "📊 Go Server Stats:"
        curl -s http://localhost:{{.GO_SERVER_PORT}}/stats | jq -r '
          "Connections: " + (.connections.active | tostring) +
          "\nUptime: " + (.system.uptime | tostring) + "s" +
          "\nGoroutines: " + (.system.goroutines | tostring) +
          "\nMemory: " + (.system.memory.alloc | tostring) + " bytes"'

  metrics:prometheus:
    desc: "📈 Show Prometheus metrics"
    cmds:
      - |
        echo "📈 Prometheus Metrics (sample):"
        curl -s http://localhost:{{.GO_SERVER_PORT}}/metrics | grep -E "(websocket_connections_active|websocket_messages_per_second)" | head -10

  prometheus:
    desc: "🖥️  Open Prometheus metrics endpoint"
    cmds:
      - open http://localhost:{{.GO_SERVER_PORT}}/metrics

  stats:
    desc: "🖥️  Open Go server stats dashboard"
    cmds:
      - open http://localhost:{{.GO_SERVER_PORT}}/stats

  dashboard:
    desc: "📊 Open Go server real-time metrics dashboard with graphs"
    cmds:
      - open http://localhost:{{.GO_SERVER_PORT}}/dashboard

  deps:
    desc: "📦 Download and tidy Go dependencies"
    dir: go-server
    cmds:
      - |
        echo "Downloading Go dependencies..."
        go mod download
        go mod tidy
        echo "✅ Dependencies updated"

  test:
    desc: "🧪 Run Go tests"
    dir: go-server
    cmds:
      - |
        echo "Running Go tests..."
        go test -v ./...

  test:race:
    desc: "🏃 Run Go tests with race detector"
    dir: go-server
    cmds:
      - |
        echo "Running Go tests with race detector..."
        go test -race -v ./...

  bench:
    desc: "🏁 Run Go benchmarks"
    dir: go-server
    cmds:
      - |
        echo "Running Go benchmarks..."
        go test -bench=. -benchmem ./...

  fmt:
    desc: "💅 Format Go code"
    dir: go-server
    cmds:
      - |
        echo "Formatting Go code..."
        go fmt ./...
        echo "✅ Code formatted"

  lint:
    desc: "🔍 Run Go linting (requires golangci-lint)"
    dir: go-server
    cmds:
      - |
        if command -v golangci-lint &> /dev/null; then
          echo "Running golangci-lint..."
          golangci-lint run
        else
          echo "⚠️  golangci-lint not installed, running go vet instead..."
          go vet ./...
        fi

  clean:
    desc: "🧹 Clean Go build artifacts"
    dir: go-server
    cmds:
      - |
        echo "Cleaning Go build artifacts..."
        rm -rf build/
        go clean
        echo "✅ Go cleanup complete"

  stop:
    desc: "🛑 Stop Go server processes"
    cmds:
      - |
        echo "Stopping Go server processes..."
        pkill -f "{{.BINARY_NAME}}" || true
        echo "✅ Go server processes stopped"

  docker:build:
    desc: "🐳 Build Docker image"
    dir: go-server
    cmds:
      - |
        echo "Building Docker image..."
        docker build -t odin-ws-server .
        echo "✅ Docker image built: odin-ws-server"

  docker:run:
    desc: "🐳 Run Docker container"
    cmds:
      - |
        echo "Running Docker container..."
        docker run -d --name odin-ws-go \
          -p {{.GO_SERVER_PORT}}:{{.GO_SERVER_PORT}} \
          -p {{.GO_METRICS_PORT}}:{{.GO_METRICS_PORT}} \
          odin-ws-server
        echo "✅ Docker container running"

  docker:stop:
    desc: "🐳 Stop Docker container"
    cmds:
      - |
        echo "Stopping Docker container..."
        docker stop odin-ws-go || true
        docker rm odin-ws-go || true
        echo "✅ Docker container stopped"

  quality:
    desc: "✨ Run all Go quality checks"
    cmds:
      - task: fmt
      - task: lint
      - task: test
      - echo "✅ All Go quality checks passed"