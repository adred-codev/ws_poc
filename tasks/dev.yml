version: '3'

vars:
  NODE_VERSION: "18"
  GO_VERSION: "1.25"

tasks:
  setup:
    desc: "⚙️  Initial project setup - install dependencies and build everything"
    cmds:
      - |
        echo "⚙️  Odin WebSocket Project Setup"
        echo "================================"

        # Check prerequisites
        echo "🔍 Checking prerequisites..."

        # Check Node.js
        if command -v node &> /dev/null; then
          node_version=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
          echo "✅ Node.js $(node --version) detected"
        else
          echo "❌ Node.js not found. Please install Node.js {{.NODE_VERSION}}+"
          exit 1
        fi

        # Check Go
        if command -v go &> /dev/null; then
          echo "✅ Go $(go version | cut -d' ' -f3) detected"
        else
          echo "❌ Go not found. Please install Go {{.GO_VERSION}}+"
          exit 1
        fi

        # Check Docker
        if command -v docker &> /dev/null; then
          echo "✅ Docker $(docker --version | cut -d' ' -f3 | cut -d',' -f1) detected"
        else
          echo "❌ Docker not found. Please install Docker"
          exit 1
        fi

        # Install Node.js dependencies
        echo ""
        echo "📦 Installing Node.js dependencies..."
        npm ci

        # Setup Go dependencies
        echo ""
        echo "📦 Setting up Go dependencies..."
        task go:deps

        # Build Go server
        echo ""
        echo "🔨 Building Go server..."
        task go:build

        # Create necessary directories
        echo ""
        echo "📁 Creating project directories..."
        mkdir -p logs metrics scripts

        echo ""
        echo "✅ Setup complete!"
        echo ""
        echo "🚀 Quick start commands:"
        echo "  task start       - Start Node.js stack"
        echo "  task start:go    - Start Go stack"
        echo "  task help        - Show all available commands"

  reset:
    desc: "🔄 Clean reset - stop everything, clean up, and restart"
    cmds:
      - |
        echo "🔄 Performing clean reset..."

        # Stop all services
        echo "🛑 Stopping all services..."
        task stop

        # Clean up
        echo "🧹 Cleaning up..."
        task clean
        task go:clean
        task client:clean

        # Rebuild
        echo "🔨 Rebuilding..."
        task go:build

        echo "✅ Reset complete!"
        echo "💡 Run 'task start' or 'task start:go' to begin"

  check:
    desc: "🔍 Check system health and dependencies"
    cmds:
      - |
        echo "🔍 System Health Check"
        echo "====================="

        # Check Node.js
        echo "Node.js:"
        if command -v node &> /dev/null; then
          echo "  ✅ $(node --version)"
        else
          echo "  ❌ Not installed"
        fi

        # Check npm
        echo "NPM:"
        if command -v npm &> /dev/null; then
          echo "  ✅ $(npm --version)"
        else
          echo "  ❌ Not installed"
        fi

        # Check Go
        echo "Go:"
        if command -v go &> /dev/null; then
          echo "  ✅ $(go version | cut -d' ' -f3)"
        else
          echo "  ❌ Not installed"
        fi

        # Check Docker
        echo "Docker:"
        if command -v docker &> /dev/null && docker ps &> /dev/null; then
          echo "  ✅ $(docker --version | cut -d' ' -f3 | cut -d',' -f1) (running)"
        elif command -v docker &> /dev/null; then
          echo "  ⚠️  Installed but not running"
        else
          echo "  ❌ Not installed"
        fi

        # Check Python (for client server)
        echo "Python:"
        if command -v python3 &> /dev/null; then
          echo "  ✅ $(python3 --version)"
        else
          echo "  ⚠️  Not installed (optional, for client serving)"
        fi

        # Check running services
        echo ""
        echo "Running Services:"
        echo "=================="
        task status 2>/dev/null || echo "⚠️  Error checking service status"

  install:tools:
    desc: "🛠️  Install additional development tools"
    cmds:
      - |
        echo "🛠️  Installing Development Tools"
        echo "==============================="

        # Install Go tools
        echo "📦 Installing Go development tools..."
        go install golang.org/x/tools/cmd/goimports@latest || echo "⚠️  Failed to install goimports"

        # Install golangci-lint
        if ! command -v golangci-lint &> /dev/null; then
          echo "📦 Installing golangci-lint..."
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin
        else
          echo "✅ golangci-lint already installed"
        fi

        # Install Task globally (if not already available)
        if ! command -v task &> /dev/null; then
          echo "📦 Installing Task runner..."
          if command -v brew &> /dev/null; then
            brew install go-task/tap/go-task
          else
            echo "⚠️  Please install Task manually: https://taskfile.dev/installation/"
          fi
        else
          echo "✅ Task runner already available"
        fi

        echo "✅ Development tools installation complete"

  update:
    desc: "📈 Update all dependencies"
    cmds:
      - |
        echo "📈 Updating Dependencies"
        echo "======================="

        # Update Node.js dependencies
        echo "📦 Updating Node.js dependencies..."
        npm update

        # Update Go dependencies
        echo "📦 Updating Go dependencies..."
        task go:deps

        echo "✅ Dependencies updated"

  backup:
    desc: "💾 Create backup of current configuration"
    cmds:
      - |
        timestamp=$(date +%Y%m%d_%H%M%S)
        backup_dir="backups/backup_${timestamp}"

        echo "💾 Creating backup..."
        mkdir -p "${backup_dir}"

        # Backup configuration files
        cp Taskfile.yml "${backup_dir}/"
        cp package.json "${backup_dir}/"
        cp -r tasks/ "${backup_dir}/"
        cp go-server/go.mod "${backup_dir}/"
        cp go-server/config.json "${backup_dir}/"

        # Backup any metrics
        if [ -d "metrics" ] && [ "$(ls -A metrics)" ]; then
          cp -r metrics/ "${backup_dir}/"
        fi

        echo "✅ Backup created: ${backup_dir}"

  lint:all:
    desc: "🔍 Run linting on all code"
    cmds:
      - |
        echo "🔍 Running All Linting Checks"
        echo "============================="

        # TypeScript/Node.js linting
        echo "🟢 Node.js linting..."
        task node:lint || echo "⚠️  Node.js linting issues found"

        # Go linting
        echo "⚡ Go linting..."
        task go:lint || echo "⚠️  Go linting issues found"

        echo "✅ Linting complete"

  format:all:
    desc: "💅 Format all code"
    cmds:
      - |
        echo "💅 Formatting All Code"
        echo "====================="

        # Format TypeScript
        echo "🟢 Formatting TypeScript..."
        task node:format

        # Format Go
        echo "⚡ Formatting Go..."
        task go:fmt

        echo "✅ All code formatted"

  test:all:
    desc: "🧪 Run all tests"
    cmds:
      - |
        echo "🧪 Running All Tests"
        echo "==================="

        # TypeScript type checking
        echo "🟢 TypeScript type checking..."
        task node:typecheck

        # Go tests
        echo "⚡ Go tests..."
        task go:test

        # Connectivity tests
        echo "🔗 Connectivity tests..."
        task test:connectivity

        echo "✅ All tests complete"

  quality:all:
    desc: "✨ Run all quality checks (format, lint, test)"
    cmds:
      - task: format:all
      - task: lint:all
      - task: test:all
      - echo "✅ All quality checks passed"

  docs:
    desc: "📚 Generate and serve documentation"
    cmds:
      - |
        echo "📚 Documentation"
        echo "==============="
        echo ""
        echo "📖 Available Documentation:"
        echo "  README.md              - Main project documentation"
        echo "  go-server/README.md    - Go server documentation"
        echo "  LOAD_TESTING.md        - Load testing guide"
        echo ""
        echo "🌐 Online Resources:"
        echo "  Task Commands: task --list"
        echo "  Go Docs: task go:docs (if godoc installed)"
        echo ""
        echo "💡 Quick Reference:"
        echo "  task help             - Show main commands"
        echo "  task start            - Start Node.js stack"
        echo "  task start:go         - Start Go stack"
        echo "  task test:quick       - Quick load test"

  env:
    desc: "🌍 Show environment information"
    cmds:
      - |
        echo "🌍 Environment Information"
        echo "=========================="
        echo "Operating System: $(uname -s) $(uname -r)"
        echo "Architecture: $(uname -m)"
        echo "Shell: $SHELL"
        echo "Working Directory: $(pwd)"
        echo ""
        echo "Node.js: $(node --version 2>/dev/null || echo 'Not installed')"
        echo "NPM: $(npm --version 2>/dev/null || echo 'Not installed')"
        echo "Go: $(go version 2>/dev/null | cut -d' ' -f3 || echo 'Not installed')"
        echo "Docker: $(docker --version 2>/dev/null | cut -d' ' -f3 | cut -d',' -f1 || echo 'Not installed')"
        echo "Python: $(python3 --version 2>/dev/null || echo 'Not installed')"
        echo ""
        echo "Current Git Branch: $(git branch --show-current 2>/dev/null || echo 'Not a git repository')"
        echo "Task Version: $(task --version 2>/dev/null || echo 'Not installed')"